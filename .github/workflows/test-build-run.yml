name: Callable Cowsql Jepsen tests

on:
  workflow_dispatch:
    inputs:
      raft-repo:
        description: 'raft repo'
        default: 'cowsql/raft'
      raft-ref:
        description: 'raft branch or ref'
        default: 'main'
      cowsql-repo:
        description: 'cowsql repo'
        default: 'cowsql/cowsql'
      cowsql-ref:
        description: 'cowsql branch or ref'
        default: 'main'
      go-cowsql-repo:
        description: 'go-cowsql repo'
        default: 'cowsql/go-cowsql'
      go-cowsql-ref:
        description: 'go-cowsql branch or ref'
        default: 'main'
      workloads:
        description: 'Jepsen workloads as JSON, e.g. [ append, bank ]'
        required: true
      nemeses:
        description: "Jepsen nemesis as JSON, e.g. [ 'pause,disk' ]"
        required: true
      cli-opts:
        description: 'Jepsen cli opts, e.g. --node-targets primaries'
        required: false
  workflow_call:
    inputs:
      jepsen-cowsql-repo:
        type: string
        required: false
        default: 'cowsql/jepsen.cowsql'
      jepsen-cowsql-ref:
        type: string
        required: false
        default: 'main'
      jepsen-repo:
        type: string
        required: false
      jepsen-branch:
        type: string
        required: false
      raft-repo:
        type: string
        required: false
      raft-ref:
        type: string
        required: false
      cowsql-repo:
        type: string
        required: false
      cowsql-ref:
        type: string
        required: false
      go-cowsql-repo:
        type: string
        required: false
      go-cowsql-ref:
        type: string
        required: false
      workloads:
        type: string
        required: true
      nemeses:
        type: string
        required: true
      cli-opts:
        type: string
        required: false

env:
  RAFT_REPO:   'cowsql/raft'
  RAFT_BRANCH: 'main'
  COWSQL_REPO:   'cowsql/cowsql'
  COWSQL_BRANCH: 'main'
  GO_COWSQL_REPO: 'cowsql/go-cowsql'
  GO_COWSQL_BRANCH: 'main'

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        workload: ${{ fromJSON(inputs.workloads) }}
        nemesis: ${{ fromJSON(inputs.nemeses) }}
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.jepsen-cowsql-repo || github.repository }}
        ref: ${{ inputs.jepsen-cowsql-ref || github.ref }}

    - name: Setup packages
      timeout-minutes: 15
      run: |
        sudo apt update
        sudo apt install -y golang gnuplot libsqlite3-dev libuv1-dev liblz4-dev graphviz build-essential psmisc
        printf core | sudo tee /proc/sys/kernel/core_pattern

    - name: Setup java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup clojure
      uses: DeLaGuardo/setup-clojure@12.1
      with:
        lein: 2.9.1

    - name: Cache clojure dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2/repository
          ~/.gitlibs
          ~/.deps.clj
        key: cljdeps-${{ hashFiles('project.clj') }}
        restore-keys: cljdeps-

    - name: Install local Jepsen
      if: ${{ inputs.jepsen-repo && inputs.jepsen-branch }}
      run: |
        git clone --branch ${{ inputs.jepsen-branch }} --depth 1 ${{ inputs.jepsen-repo }}
        cd jepsen/jepsen
        git log -n 1
        lein install
        cd ../..

    - name: Checkout raft
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.raft-repo || env.RAFT_REPO }}
        ref: ${{ inputs.raft-ref || env.RAFT_REF }}
        path: raft

    - name: Build raft
      run: |
        cd raft
        git log -n 1
        autoreconf -i
        ./configure --enable-debug --enable-backtrace
        make -j4 CFLAGS=-O0
        sudo make install
        sudo ldconfig

    - name: Checkout cowsql
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.cowsql-repo || env.COWSQL_REPO }}
        ref: ${{ inputs.cowsql-ref || env.COWSQL_REF }}
        path: cowsql

    - name: Build cowsql
      run: |
        cd cowsql
        git log -n 1
        autoreconf -i
        ./configure --enable-debug --enable-backtrace
        make -j4
        sudo make install
        sudo ldconfig

    - name: Test
      env:
        LD_LIBRARY_PATH: "/usr/local/lib"
      timeout-minutes: 8
      run: |
        go get golang.org/x/sync/semaphore
        go get -tags libsqlite3 github.com/cowsql/go-cowsql/app
        go build -tags libsqlite3 -o resources/app resources/app.go
        sudo ufw disable
        sleep 0.200
        sudo systemctl stop ufw.service
        sudo ./resources/network.sh setup 5
        if test ${{ matrix.workload }} = set; then echo 180 >time-limit; else echo 240 >time-limit; fi
        lein run test --no-ssh --binary $(pwd)/resources/app --dir $HOME/jepsen \
          --workload ${{ matrix.workload }} \
          --nemesis ${{ matrix.nemesis }} \
          --rate 100 \
          --time-limit $(cat time-limit) \
          ${{ inputs.cli-opts }}
        sudo ./resources/network.sh teardown 5

    - name: Jepsen log Summary
      if: ${{ always() }}
      run: tail -n 100 store/current/jepsen.log > store/current/tail-jepsen.log

    - name: Failure Artifact
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: jepsen-data-${{ matrix.workload }}-${{ matrix.nemesis }}-failure
        path: |
          /usr/local/lib/libcowsql*
          /usr/local/lib/libraft*
          store/cowsql*
          !**/current/
          !**/latest/
